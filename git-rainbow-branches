#!/bin/bash
# Bradford Smith
# git-rainbow-branches
# 2021-01-05
# Rainbow color output for `git branch -avv`

# shellcheck disable=2034
# this disables the "appears unused" warning from shellcheck because even though
# this script doesn't use the variables git does
USAGE=""
SUBDIRECTORY_OK=true

# shellcheck source=/dev/null
# this is added because shellcheck cannot follow the dynamic path to
# git-sh-setup, this is the way git recommends to do it, so I am ok silencing
# the warning here
source "$(git --exec-path)/git-sh-setup"

require_work_tree

if [ "$1" == "--help" ]; then
    man git-rainbow-branches
    exit
fi

if git config --get-colorbool color.ui; then
    CURRENT_COLOR=$(git config --get-color color.branch.current "green")
    UPSTREAM_COLOR=$(git config --get-color color.branch.upstream "blue")
    RESET=$(git config --get-color "" "reset")

    # rainbow colors
    R=$(git config --get-color "" "red")
    Y=$(git config --get-color "" "yellow")
    G=$(git config --get-color "" "green")
    C=$(git config --get-color "" "cyan")
    B=$(git config --get-color "" "blue")
    M=$(git config --get-color "" "magenta")
    COLORS=("$R" "$Y" "$G" "$C" "$B" "$M")

    branches=$(git branch -avv)
    declare -A remotes
    remotes=()
    while read -r line; do
        if [[ $line == "* "* ]]; then
            # current branch
            line=$(echo "$line" | sed -e "s/^\* \([a-zA-Z0-9_\.-]*\)/* ${CURRENT_COLOR}\1${RESET}/")
        else
            line="  $line" # spacing to match current branch
        fi
        if [[ $line == *"["* ]] && [[ $line == *"]"* ]]; then
            # upstream branch
            line=$(echo "$line" | sed -e "s/\[\([a-zA-Z0-9_\.-]*\/[a-zA-Z0-9_\.-]*\)\]/[${UPSTREAM_COLOR}\1${RESET}]/")
        fi
        if [[ $line == "  remotes"* ]]; then
            # remote branch
            remote_name=$(echo "$line" | grep -oP "remotes/[\w_\.-]+")
            if [[ -z ${remotes[$remote_name]} ]]; then
                len_remotes=${#remotes[@]}
                len_colors=${#COLORS[@]}
                idx=$(( len_remotes % len_colors ))
                remotes[$remote_name]=${COLORS[$idx]}
                color=${COLORS[$idx]}
            else
                color=${remotes[$remote_name]}
            fi
            line=$(echo "$line" | sed -e "s/\(remotes\/[a-zA-Z0-9_\.-]*\/[a-zA-Z0-9_\.-]*\)/${color}\1${RESET}/")
        fi
        printf "%s\n" "$line"
    done <<< "$branches"
else
    git branch -avv
fi
